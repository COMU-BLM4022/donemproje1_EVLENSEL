library("here")
evlenselPackage::convert_and_write_excel(here("melb_data_1.xlsx"),"Bedroom2")
library("here")
evlenselPackage::convert_and_write_excel(here("melb_data_1.xlsx"),"Rooms")
library("here")
evlenselPackage::convert_and_write_excel(here("melb_data_1.xlsx"),"Bathroom")
library("here")
evlenselPackage::convert_and_write_excel(here("melb_data_1.xlsx"),"YearBuilt")
library("here")
evlenselPackage::convert_and_write_excel(here("melb_data_1.xlsx"),"Car")
library("here")
evlenselPackage::convert_and_write_excel(here("melb_data_1.xlsx"),"Latitude")
library("here")
evlenselPackage::convert_and_write_excel(here("melb_data_1.xlsx"),"Lattitude")
library("here")
evlenselPackage::convert_and_write_excel(here("melb_data_1.xlsx"),"Longtitude")
library("here")
evlenselPackage::convert_and_write_excel(here("melb_data_1.xlsx"),"Postcode")
library("here")
evlenselPackage::convert_and_write_excel(here("melb_data_1.xlsx"),"BuildArea")
library("here")
evlenselPackage::convert_and_write_excel(here("melb_data_1.xlsx"),"BuildingArea")
library("here")
evlenselPackage::convert_and_write_excel(here("melb_data_1.xlsx"),"Propertycount")
library("here")
evlenselPackage::convert_and_write_excel(here("melb_data_1.xlsx"),"Landsize")
library(here)
evlenselPackage::analyze_distribution(here("melb_data_1.xlsx"),"Distance")
library(here)
evlenselPackage::analyze_distribution(here("melb_data_1.xlsx"),"Landsize")
library(evlenselPackage)
library(here)
evlenselPackage::analyze_distribution(here("melb_data_1.xlsx"),"Lattitude")
library("here")
evlenselPackage::convert_and_write_excel(here("melb_data_1.xlsx"),"Landsize")
library("here")
evlenselPackage::convert_and_write_excel(here("melb_data_1.xlsx"),"Landsize")
library(evlenselPackage)
evlenselPackage::load_libraries()
library(here)
evlenselPackage::analyze_missing_data(here("melb_data_1.xlsx"))
#install.packages("dplyr")
library(here)
evlenselPackage::fill_na_with_mean(here("melb_data_1.xlsx"),"Car",here("melb_data_1.xlsx"))
#install.packages("dplyr")
library(here)
evlenselPackage::fill_na_with_mean(here("melb_data_1.xlsx"),"BuildingArea",here("melb_data_1.xlsx"))
#install.packages("dplyr")
library(here)
evlenselPackage::fill_na_with_mean(here("melb_data_1.xlsx"),"YearBuilt",here("melb_data_1.xlsx"))
library(here)
evlenselPackage::fill_na_with_mode(here("melb_data_1.xlsx"),"CouncilArea",here("melb_data_1.xlsx"))
library(evlenselPackage)
evlenselPackage::load_libraries()
library(here)
evlenselPackage::analyze_missing_data(here("melb_data_1.xlsx"))
library(here)
evlenselPackage::calculate_correlations_with_price_excel(here("melb_data_1.xlsx"),"Price")
#install.packages("ggplot2")
library(here)
evlenselPackage::visualize_columns(here("melb_data_1.xlsx"),"Price","Rooms")
#install.packages("ggplot2")
library(here)
evlenselPackage::visualize_columns(here("melb_data_1.xlsx"),"Price","Distance")
library(here)
evlenselPackage::analyze_distribution(here("melb_data_1.xlsx"),"Lattitude")
library(here)
evlenselPackage::analyze_distribution(here("melb_data_1.xlsx"),"Distance")
library(here)
evlenselPackage::analyze_distribution(here("melb_data_1.xlsx"),"Distance")
library(here)
evlenselPackage::analyze_distribution(here("melb_data_1.xlsx"),"Price")
library(here)
evlenselPackage::calculate_correlations_with_price_excel(here("melb_data_1.xlsx"),"Price")
library(here)
evlenselPackage::analyze_distribution(here("melb_data_1.xlsx"),"Rooms")
library(here)
evlenselPackage::analyze_distribution(here("melb_data_1.xlsx"),"Bedroom2")
library(here)
evlenselPackage::analyze_distribution(here("melb_data_1.xlsx"),"Bathroom")
library(here)
evlenselPackage::analyze_distribution(here("melb_data_1.xlsx"),"YearBuilt")
library(here)
evlenselPackage::analyze_distribution(here("melb_data_1.xlsx"),"Car")
library(here)
evlenselPackage::analyze_distribution(here("melb_data_1.xlsx"),"Lattitude")
library(here)
evlenselPackage::analyze_distribution(here("melb_data_1.xlsx"),"Distance")
library(here)
evlenselPackage::analyze_distribution(here("melb_data_1.xlsx"),"BuildingArea")
library(here)
evlenselPackage::analyze_distribution(here("melb_data_1.xlsx"),"PropertyCount")
library(here)
evlenselPackage::analyze_distribution(here("melb_data_1.xlsx"),"Propertycount")
library(here)
evlenselPackage::analyze_distribution(here("melb_data_1.xlsx"),"Landsize")
#install.packages("ggplot2")
library(here)
evlenselPackage::visualize_columns(here("melb_data_1.xlsx"),"Price","Bedroom2")
#install.packages("ggplot2")
library(here)
evlenselPackage::visualize_columns(here("melb_data_1.xlsx"),"Price","Bathroom")
#install.packages("ggplot2")
library(here)
evlenselPackage::visualize_columns(here("melb_data_1.xlsx"),"Price","YearBuilt")
library(readr)
melb_data <- read_csv("melb_data.csv")
View(melb_data)
install.packages("readr")
analyze_distribution <- function(file_path, column_name) {
library(readr)
library(dplyr)
library(ggplot2)
library(cowplot)
# CSV dosyasını oku
data <- read_csv(file_path)
# Belirtilen sütunu sayısal veri tipine dönüştür
data <- data %>%
mutate(!!sym(column_name) := as.numeric(gsub(",", ".", .data[[column_name]])))
# Belirtilen sütunu seç
column <- data[[column_name]]
# Histogram çizimi
hist_plot <- ggplot(data, aes_string(x = column_name)) +
geom_histogram(binwidth = 1000, fill = "skyblue", color = "black") +
labs(title = paste("Histogram of", column_name),
x = column_name, y = "Frequency") +
scale_x_continuous(labels = scales::comma) +
scale_y_continuous(labels = scales::comma)
# Boxplot çizimi
box_plot <- ggplot(data, aes_string(y = column_name)) +
geom_boxplot(fill = "lightgreen", color = "black") +
labs(title = paste("Boxplot of", column_name),
x = "", y = column_name) +
scale_y_continuous(labels = scales::comma)
# Çizimleri yan yana göster
cowplot::plot_grid(hist_plot, box_plot, ncol = 2)
}
install.packages("readr")
analyze_distribution <- function(file_path, column_name) {
library(readr)
library(dplyr)
library(ggplot2)
library(cowplot)
# CSV dosyasını oku
data <- read_csv(file_path)
# Belirtilen sütunu sayısal veri tipine dönüştür
data <- data %>%
mutate(!!sym(column_name) := as.numeric(gsub(",", ".", .data[[column_name]])))
# Belirtilen sütunu seç
column <- data[[column_name]]
# Histogram çizimi
hist_plot <- ggplot(data, aes_string(x = column_name)) +
geom_histogram(binwidth = 1000, fill = "skyblue", color = "black") +
labs(title = paste("Histogram of", column_name),
x = column_name, y = "Frequency") +
scale_x_continuous(labels = scales::comma) +
scale_y_continuous(labels = scales::comma)
# Boxplot çizimi
box_plot <- ggplot(data, aes_string(y = column_name)) +
geom_boxplot(fill = "lightgreen", color = "black") +
labs(title = paste("Boxplot of", column_name),
x = "", y = column_name) +
scale_y_continuous(labels = scales::comma)
# Çizimleri yan yana göster
cowplot::plot_grid(hist_plot, box_plot, ncol = 2)
}
analyze_distribution(here("melb_data.csv"),"Distance")
analyze_distribution <- function(file_path, column_name) {
library(readr)
library(dplyr)
library(ggplot2)
library(cowplot)
library(here)
# CSV dosyasını oku
data <- read_csv(file_path)
# Belirtilen sütunu sayısal veri tipine dönüştür
data <- data %>%
mutate(!!sym(column_name) := as.numeric(gsub(",", ".", .data[[column_name]])))
# Belirtilen sütunu seç
column <- data[[column_name]]
# Histogram çizimi
hist_plot <- ggplot(data, aes_string(x = column_name)) +
geom_histogram(binwidth = 1000, fill = "skyblue", color = "black") +
labs(title = paste("Histogram of", column_name),
x = column_name, y = "Frequency") +
scale_x_continuous(labels = scales::comma) +
scale_y_continuous(labels = scales::comma)
# Boxplot çizimi
box_plot <- ggplot(data, aes_string(y = column_name)) +
geom_boxplot(fill = "lightgreen", color = "black") +
labs(title = paste("Boxplot of", column_name),
x = "", y = column_name) +
scale_y_continuous(labels = scales::comma)
# Çizimleri yan yana göster
cowplot::plot_grid(hist_plot, box_plot, ncol = 2)
}
analyze_distribution(here("melb_data.csv"),"Distance")
analyze_distribution <- function(file_path, column_name) {
library(readr)
library(dplyr)
library(ggplot2)
library(cowplot)
# CSV dosyasını oku
data <- read_csv(file_path, show_col_types = FALSE)
# Belirtilen sütunu sayısal veri tipine dönüştür
data <- data %>%
mutate(!!sym(column_name) := as.numeric(gsub(",", ".", .data[[column_name]])))
# Belirtilen sütunu seç
column <- data[[column_name]]
# Histogram çizimi
hist_plot <- ggplot(data, aes(x = !!sym(column_name))) +
geom_histogram(binwidth = 1000, fill = "skyblue", color = "black") +
labs(title = paste("Histogram of", column_name),
x = column_name, y = "Frequency") +
scale_x_continuous(labels = scales::comma) +
scale_y_continuous(labels = scales::comma)
# Boxplot çizimi
box_plot <- ggplot(data, aes(y = !!sym(column_name))) +
geom_boxplot(fill = "lightgreen", color = "black") +
labs(title = paste("Boxplot of", column_name),
x = "", y = column_name) +
scale_y_continuous(labels = scales::comma)
# Çizimleri yan yana göster
cowplot::plot_grid(hist_plot, box_plot, ncol = 2)
}
analyze_distribution(here("melb_data.csv"),"Distance")
analyze_distribution <- function(file_path, column_name) {
library(readr)
library(dplyr)
library(ggplot2)
library(cowplot)
# CSV dosyasını oku
data <- read_csv(file_path, show_col_types = FALSE)
# Belirtilen sütunu sayısal veri tipine dönüştür
data <- data %>%
mutate(!!sym(column_name) := as.numeric(gsub(",", ".", .data[[column_name]])))
# Belirtilen sütunun en küçük ve en büyük değerlerini al
min_val <- min(data[[column_name]], na.rm = TRUE)
max_val <- max(data[[column_name]], na.rm = TRUE)
# Histogram çizimi
hist_plot <- ggplot(data, aes(x = !!sym(column_name))) +
geom_histogram(binwidth = 1000, fill = "skyblue", color = "black") +
labs(title = paste("Histogram of", column_name),
x = column_name, y = "Frequency") +
scale_x_continuous(labels = scales::comma, limits = c(min_val, max_val)) +
scale_y_continuous(labels = scales::comma)
# Boxplot çizimi
box_plot <- ggplot(data, aes(y = !!sym(column_name))) +
geom_boxplot(fill = "lightgreen", color = "black") +
labs(title = paste("Boxplot of", column_name),
x = "", y = column_name) +
scale_y_continuous(labels = scales::comma, limits = c(min_val, max_val))
# Çizimleri yan yana göster
cowplot::plot_grid(hist_plot, box_plot, ncol = 2)
}
analyze_distribution(here("melb_data.csv"),"Distance")
analyze_distribution <- function(file_path, column_name) {
library(readr)
library(dplyr)
library(ggplot2)
library(cowplot)
# CSV dosyasını oku
data <- read_csv(file_path, show_col_types = FALSE)
# Belirtilen sütunu sayısal veri tipine dönüştür
data <- data %>%
mutate(!!sym(column_name) := as.numeric(gsub(",", ".", .data[[column_name]])))
# Eksik değerleri filtrele
data <- data %>% filter(!is.na(!!sym(column_name)))
# Belirtilen sütunun en küçük ve en büyük değerlerini al
min_val <- min(data[[column_name]], na.rm = TRUE)
max_val <- max(data[[column_name]], na.rm = TRUE)
# Histogram çizimi
hist_plot <- ggplot(data, aes(x = !!sym(column_name))) +
geom_histogram(binwidth = 1000, fill = "skyblue", color = "black") +
labs(title = paste("Histogram of", column_name),
x = column_name, y = "Frequency") +
scale_x_continuous(labels = scales::comma, limits = c(min_val, max_val)) +
scale_y_continuous(labels = scales::comma)
# Boxplot çizimi
box_plot <- ggplot(data, aes(y = !!sym(column_name))) +
geom_boxplot(fill = "lightgreen", color = "black") +
labs(title = paste("Boxplot of", column_name),
x = "", y = column_name) +
scale_y_continuous(labels = scales::comma, limits = c(min_val, max_val))
# Çizimleri yan yana göster
cowplot::plot_grid(hist_plot, box_plot, ncol = 2)
}
analyze_distribution(here("melb_data.csv"),"Distance")
analyze_distribution <- function(file_path, column_name) {
library(readr)
library(dplyr)
library(ggplot2)
library(cowplot)
# CSV dosyasını oku
data <- read_csv(file_path, show_col_types = FALSE)
# Belirtilen sütunu sayısal veri tipine dönüştür
data <- data %>%
mutate(!!sym(column_name) := as.numeric(gsub(",", ".", .data[[column_name]])))
# Eksik değerleri ve veri dışı değerleri filtrele
data <- data %>%
filter(!is.na(!!sym(column_name))) %>%
filter(!!sym(column_name) >= min(!!sym(column_name), na.rm = TRUE)) %>%
filter(!!sym(column_name) <= max(!!sym(column_name), na.rm = TRUE))
# Belirtilen sütunun en küçük ve en büyük değerlerini al
min_val <- min(data[[column_name]], na.rm = TRUE)
max_val <- max(data[[column_name]], na.rm = TRUE)
# Histogram çizimi
hist_plot <- ggplot(data, aes(x = !!sym(column_name))) +
geom_histogram(binwidth = 1000, fill = "skyblue", color = "black") +
labs(title = paste("Histogram of", column_name),
x = column_name, y = "Frequency") +
scale_x_continuous(labels = scales::comma, limits = c(min_val, max_val)) +
scale_y_continuous(labels = scales::comma)
# Boxplot çizimi
box_plot <- ggplot(data, aes(y = !!sym(column_name))) +
geom_boxplot(fill = "lightgreen", color = "black") +
labs(title = paste("Boxplot of", column_name),
x = "", y = column_name) +
scale_y_continuous(labels = scales::comma, limits = c(min_val, max_val))
# Çizimleri yan yana göster
cowplot::plot_grid(hist_plot, box_plot, ncol = 2)
}
analyze_distribution(here("melb_data.csv"),"Distance")
analyze_distribution <- function(file_path, column_name) {
library(readr)
library(dplyr)
library(ggplot2)
library(cowplot)
# CSV dosyasını oku
data <- read_csv(file_path, show_col_types = FALSE)
# Belirtilen sütunu sayısal veri tipine dönüştür
data <- data %>%
mutate(!!sym(column_name) := as.numeric(gsub(",", ".", .data[[column_name]])))
# Eksik değerleri ve veri dışı değerleri filtrele
data <- data %>%
filter(!is.na(!!sym(column_name)))
# Belirtilen sütunun en küçük ve en büyük değerlerini al
min_val <- min(data[[column_name]], na.rm = TRUE)
max_val <- max(data[[column_name]], na.rm = TRUE)
# Histogram çizimi
hist_plot <- ggplot(data, aes(x = !!sym(column_name))) +
geom_histogram(binwidth = 1000, fill = "skyblue", color = "black") +
labs(title = paste("Histogram of", column_name),
x = column_name, y = "Frequency") +
scale_x_continuous(labels = scales::comma, limits = c(min_val, max_val)) +
scale_y_continuous(labels = scales::comma)
# Boxplot çizimi
box_plot <- ggplot(data, aes(y = !!sym(column_name))) +
geom_boxplot(fill = "lightgreen", color = "black") +
labs(title = paste("Boxplot of", column_name),
x = "", y = column_name) +
scale_y_continuous(labels = scales::comma, limits = c(min_val, max_val))
# Çizimleri yan yana göster
cowplot::plot_grid(hist_plot, box_plot, ncol = 2)
}
analyze_distribution(here("melb_data.csv"),"Distance")
analyze_distribution <- function(file_path, column_name) {
library(readr)
library(dplyr)
library(ggplot2)
library(cowplot)
# CSV dosyasını oku
data <- read_csv(file_path, show_col_types = FALSE)
# Belirtilen sütunu sayısal veri tipine dönüştür
data <- data %>%
mutate(!!sym(column_name) := as.numeric(gsub(",", ".", .data[[column_name]])))
# Eksik değerleri ve veri dışı değerleri filtrele
data <- data %>%
filter(!is.na(!!sym(column_name))) %>%
filter(!!sym(column_name) >= min(!!sym(column_name), na.rm = TRUE)) %>%
filter(!!sym(column_name) <= max(!!sym(column_name), na.rm = TRUE))
# Belirtilen sütunun en küçük ve en büyük değerlerini al
min_val <- min(data[[column_name]], na.rm = TRUE)
max_val <- max(data[[column_name]], na.rm = TRUE)
# Histogram çizimi
hist_plot <- ggplot(data, aes(x = !!sym(column_name))) +
geom_histogram(binwidth = 1000, fill = "skyblue", color = "black") +
labs(title = paste("Histogram of", column_name),
x = column_name, y = "Frequency") +
scale_x_continuous(labels = scales::comma, limits = c(min_val, max_val)) +
scale_y_continuous(labels = scales::comma)
# Boxplot çizimi
box_plot <- ggplot(data, aes(y = !!sym(column_name))) +
geom_boxplot(fill = "lightgreen", color = "black") +
labs(title = paste("Boxplot of", column_name),
x = "", y = column_name) +
scale_y_continuous(labels = scales::comma, limits = c(min_val, max_val))
# Çizimleri yan yana göster
cowplot::plot_grid(hist_plot, box_plot, ncol = 2)
}
analyze_distribution(here("melb_data.csv"),"Distance")
analyze_distribution <- function(file_path, column_name) {
library(readxl)
library(dplyr)
library(ggplot2)
library(cowplot)
# Excel dosyasını oku
data <- read_excel(file_path)
# Belirtilen sütunu sayısal veri tipine dönüştür
data <- data %>%
mutate({{ column_name }} := as.numeric(gsub(",", ".", {{ column_name }})))
# Eksik değerleri ve veri dışı değerleri filtrele
data <- data %>%
filter(!is.na({{ column_name }})) %>%
filter({{ column_name }} >= min({{ column_name }}, na.rm = TRUE)) %>%
filter({{ column_name }} <= max({{ column_name }}, na.rm = TRUE))
# Belirtilen sütunun en küçük ve en büyük değerlerini al
min_val <- min(data[[column_name]], na.rm = TRUE)
max_val <- max(data[[column_name]], na.rm = TRUE)
# Histogram çizimi
hist_plot <- ggplot(data, aes(x = {{ column_name }})) +
geom_histogram(binwidth = 1000, fill = "skyblue", color = "black") +
labs(title = paste("Histogram of", column_name),
x = column_name, y = "Frequency") +
scale_x_continuous(labels = scales::comma, limits = c(min_val, max_val)) +
scale_y_continuous(labels = scales::comma)
# Boxplot çizimi
box_plot <- ggplot(data, aes(y = {{ column_name }})) +
geom_boxplot(fill = "lightgreen", color = "black") +
labs(title = paste("Boxplot of", column_name),
x = "", y = column_name) +
scale_y_continuous(labels = scales::comma, limits = c(min_val, max_val))
# Çizimleri yan yana göster
cowplot::plot_grid(hist_plot, box_plot, ncol = 2)
}
analyze_distribution(here("melb_data_1.xlsx"),"Distance")
analyze_distribution <- function(file_path, column_name) {
library(readxl)
library(dplyr)
library(ggplot2)
library(cowplot)
# Excel dosyasını oku
data <- read_excel(file_path)
# Belirtilen sütunu sayısal veri tipine dönüştür ve virgülü noktaya çevir
data <- data %>%
mutate({{ column_name }} := as.numeric(gsub(",", ".", {{ column_name }}, fixed = TRUE)))
# Eksik değerleri filtrele
data <- data %>%
filter(!is.na({{ column_name }}))
# Histogram ve boxplot çizimi için minimum ve maksimum değerleri al
min_val <- min(data[[column_name]], na.rm = TRUE)
max_val <- max(data[[column_name]], na.rm = TRUE)
# Histogram çizimi
hist_plot <- ggplot(data, aes_string(x = column_name)) +
geom_histogram(binwidth = 1000, fill = "skyblue", color = "black") +
labs(title = paste("Histogram of", column_name),
x = column_name, y = "Frequency") +
scale_x_continuous(labels = scales::comma, limits = c(min_val, max_val)) +
scale_y_continuous(labels = scales::comma)
# Boxplot çizimi
box_plot <- ggplot(data, aes_string(y = column_name)) +
geom_boxplot(fill = "lightgreen", color = "black") +
labs(title = paste("Boxplot of", column_name),
x = "", y = column_name) +
scale_y_continuous(labels = scales::comma, limits = c(min_val, max_val))
# Çizimleri yan yana göster
cowplot::plot_grid(hist_plot, box_plot, ncol = 2)
}
analyze_distribution(here("melb_data_1.xlsx"),"Distance")
analyze_distribution <- function(file_path, column_name) {
library(readxl)
library(dplyr)
library(ggplot2)
library(cowplot)
library(scales)
# Excel dosyasını oku
data <- read_excel(file_path)
# Belirtilen sütunu sayısal veri tipine dönüştür ve virgülü noktaya çevir
data <- data %>%
mutate({{ column_name }} := as.numeric(gsub(",", ".", {{ column_name }}, fixed = TRUE)))
# Eksik veya geçersiz değerleri filtrele
data <- data %>%
filter(!is.na({{ column_name }})) %>%
filter(!is.infinite({{ column_name }}))
# Belirtilen sütunun en küçük ve en büyük değerlerini al
min_val <- min(data[[column_name]], na.rm = TRUE)
max_val <- max(data[[column_name]], na.rm = TRUE)
# Histogram çizimi
hist_plot <- ggplot(data, aes_string(x = column_name)) +
geom_histogram(binwidth = 1000, fill = "skyblue", color = "black") +
labs(title = paste("Histogram of", column_name),
x = column_name, y = "Frequency") +
scale_x_continuous(labels = comma, limits = c(min_val, max_val)) +
scale_y_continuous(labels = comma)
# Boxplot çizimi
box_plot <- ggplot(data, aes_string(y = column_name)) +
geom_boxplot(fill = "lightgreen", color = "black") +
labs(title = paste("Boxplot of", column_name),
x = "", y = column_name) +
scale_y_continuous(labels = comma, limits = c(min_val, max_val))
# Çizimleri yan yana göster
plot_grid(hist_plot, box_plot, ncol = 2)
}
analyze_distribution(here("melb_data_1.xlsx"),"Distance")
library(evlenselPackage)
library(evlenselPackage)
library(evlenselPackage)
library(here)
evlenselPackage::train_model(here(melb_data_1.xlsx))
library(here)
evlenselPackage::train_model(here("melb_data_1.xlsx"))
library(here)
install.packages("caret")
evlenselPackage::train_model(here("melb_data_1.xlsx"))
library(evlenselPackage)
library(here)
install.packages("caret")
evlenselPackage::train_model(here("melb_data_1.xlsx"))
library(here)
model_result <- evlenselPackage::train_model(here("melb_data_1.xlsx"))
predictions <- predict_from_model(model_result$model, model_result$test_data)
head(predictions)
